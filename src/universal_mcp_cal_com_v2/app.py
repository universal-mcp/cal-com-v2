from typing import Any
from universal_mcp.applications import APIApplication
from universal_mcp.integrations import Integration

class CalComV2App(APIApplication):
    def __init__(self, integration: Integration = None, **kwargs) -> None:
        super().__init__(name='cal-com-v2', integration=integration, **kwargs)
        self.base_url = "https://api.cal.com"

    def cal_provider_controller_verify_client_id(self, clientId) -> dict[str, Any]:
        """
        Retrieves information for a provider using the client ID provided in the path.

        Args:
            clientId (string): clientId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Cal Provider, important
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        url = f"{self.base_url}/v2/provider/{clientId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cal_provider_controller_verify_access_token(self, clientId) -> dict[str, Any]:
        """
        Retrieves an access token for the specified client ID using a GET request.

        Args:
            clientId (string): clientId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Cal Provider
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        url = f"{self.base_url}/v2/provider/{clientId}/access-token"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def gcal_controller_redirect(self) -> dict[str, Any]:
        """
        Retrieves and returns an authorization URL for Google Calendar OAuth using the "GET" method at the "/v2/gcal/oauth/auth-url" path.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Google Calendar
        """
        url = f"{self.base_url}/v2/gcal/oauth/auth-url"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def gcal_controller_save(self, state, code) -> dict[str, Any]:
        """
        Handles Google Calendar OAuth 2.0 authorization callback by exchanging an authorization code for an access token and saving credentials.

        Args:
            state (string): A unique value used to prevent cross-site request forgery (CSRF) attacks, typically generated by the client and verified by the server during the OAuth flow.
            code (string): Authorization code received from Google Calendar OAuth flow, used to exchange for an access token during the authentication process.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Google Calendar
        """
        url = f"{self.base_url}/v2/gcal/oauth/save"
        query_params = {k: v for k, v in [('state', state), ('code', code)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def gcal_controller_check(self) -> dict[str, Any]:
        """
        Checks the Google Calendar availability or status using the v2 API and returns a success response if valid.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Google Calendar
        """
        url = f"{self.base_url}/v2/gcal/check"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_users_controller_get_managed_users(self, clientId, limit=None) -> dict[str, Any]:
        """
        Retrieves a list of users associated with a specific OAuth client ID, optionally limited by the specified query parameter.

        Args:
            clientId (string): clientId
            limit (number): The number of items to return Example: '10'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/users"
        query_params = {k: v for k, v in [('limit', limit)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_users_controller_create_user(self, clientId, email, name, timeFormat=None, weekStart=None, timeZone=None, locale=None, avatarUrl=None) -> dict[str, Any]:
        """
        Creates a new user for an OAuth client specified by the `clientId` and returns a successful response with a 201 status code.

        Args:
            clientId (string): clientId
            email (string): email Example: 'alice@example.com'.
            name (string): Managed user's name is used in emails Example: 'Alice Smith'.
            timeFormat (number): Must be a number 12 or 24 Example: '12'.
            weekStart (string): weekStart Example: 'Monday'.
            timeZone (string): Timezone is used to create user's default schedule from Monday to Friday from 9AM to 5PM. If it is not passed then user does not have
              a default schedule and it must be created manually via the /schedules endpoint. Until the schedule is created, the user can't access availability atom to set his / her availability nor booked.
              It will default to Europe/London if not passed. Example: 'America/New_York'.
            locale (string): locale Example: 'en'.
            avatarUrl (string): URL of the user's avatar image Example: 'https://cal.com/api/avatar/2b735186-b01b-46d3-87da-019b8f61776b.png'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        request_body = {
            'email': email,
            'name': name,
            'timeFormat': timeFormat,
            'weekStart': weekStart,
            'timeZone': timeZone,
            'locale': locale,
            'avatarUrl': avatarUrl,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/users"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_users_controller_get_user_by_id(self, clientId, userId) -> dict[str, Any]:
        """
        Retrieves user-specific information associated with an OAuth client using the provided client ID and user ID.

        Args:
            clientId (string): clientId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/users/{userId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_users_controller_update_user(self, clientId, userId, email=None, name=None, timeFormat=None, defaultScheduleId=None, weekStart=None, timeZone=None, locale=None, avatarUrl=None) -> dict[str, Any]:
        """
        Updates the association of a user with a specified OAuth client using the PATCH method on the "/v2/oauth-clients/{clientId}/users/{userId}" path.

        Args:
            clientId (string): clientId
            userId (string): userId
            email (string): email
            name (string): name
            timeFormat (number): Must be 12 or 24 Example: '12'.
            defaultScheduleId (number): defaultScheduleId
            weekStart (string): weekStart Example: 'Monday'.
            timeZone (string): timeZone
            locale (string): locale Example: 'en'.
            avatarUrl (string): URL of the user's avatar image Example: 'https://cal.com/api/avatar/2b735186-b01b-46d3-87da-019b8f61776b.png'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        request_body = {
            'email': email,
            'name': name,
            'timeFormat': timeFormat,
            'defaultScheduleId': defaultScheduleId,
            'weekStart': weekStart,
            'timeZone': timeZone,
            'locale': locale,
            'avatarUrl': avatarUrl,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/users/{userId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_users_controller_delete_user(self, clientId, userId) -> dict[str, Any]:
        """
        Removes a user's association with an OAuth client identified by the client ID and user ID.

        Args:
            clientId (string): clientId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/users/{userId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_users_controller_force_refresh(self, clientId, userId) -> dict[str, Any]:
        """
        Forces a refresh for the OAuth client's user session, invalidating existing tokens and generating new ones.

        Args:
            clientId (string): clientId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/users/{userId}/force-refresh"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_flow_controller_refresh_tokens(self, clientId, refreshToken) -> dict[str, Any]:
        """
        Refreshes an access token for a specified client using OAuth 2.0, allowing the client to obtain a new access token without user interaction.

        Args:
            clientId (string): clientId
            refreshToken (string): Managed user's refresh token.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Managed Users
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        request_body = {
            'refreshToken': refreshToken,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/oauth/{clientId}/refresh"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_webhooks_controller_create_oauth_client_webhook(self, clientId, active, subscriberUrl, triggers, payloadTemplate=None, secret=None) -> dict[str, Any]:
        """
        Creates a webhook for an OAuth client using the client ID specified in the path, enabling event-driven communication.

        Args:
            clientId (string): clientId
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Webhooks
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/webhooks"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_webhooks_controller_get_oauth_client_webhooks(self, clientId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of webhooks associated with a specific OAuth client using clientId, take, and skip parameters for pagination.

        Args:
            clientId (string): clientId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Webhooks
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/webhooks"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_webhooks_controller_delete_all_oauth_client_webhooks(self, clientId) -> dict[str, Any]:
        """
        Deletes a webhook associated with an OAuth client identified by the provided client ID using the DELETE method.

        Args:
            clientId (string): clientId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Webhooks
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/webhooks"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_webhooks_controller_update_oauth_client_webhook(self, clientId, webhookId, payloadTemplate=None, active=None, subscriberUrl=None, triggers=None, secret=None) -> dict[str, Any]:
        """
        Updates an existing webhook for a specified OAuth client using the "PATCH" method, modifying its configuration as needed.

        Args:
            clientId (string): clientId
            webhookId (string): webhookId
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Webhooks
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/webhooks/{webhookId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_webhooks_controller_get_oauth_client_webhook(self, clientId, webhookId) -> dict[str, Any]:
        """
        Retrieves information about a specific webhook associated with an OAuth client using the "GET" method at the specified path.

        Args:
            clientId (string): clientId
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Webhooks
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/webhooks/{webhookId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def oauth_client_webhooks_controller_delete_oauth_client_webhook(self, clientId, webhookId) -> dict[str, Any]:
        """
        Deletes a webhook associated with a specific OAuth client using the provided client and webhook IDs.

        Args:
            clientId (string): clientId
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Platform / Webhooks
        """
        if clientId is None:
            raise ValueError("Missing required parameter 'clientId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/oauth-clients/{clientId}/webhooks/{webhookId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_attributes_controller_get_organization_attributes(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of organization attributes filtered by pagination parameters.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_attributes_controller_create_organization_attribute(self, orgId, name, slug, type, options, enabled=None) -> dict[str, Any]:
        """
        Adds new attributes to an organization using the API, specifying the organization ID in the path, and returns a successful creation status.

        Args:
            orgId (string): orgId
            name (string): name
            slug (string): slug
            type (string): type
            options (array): options
            enabled (boolean): enabled

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        request_body = {
            'name': name,
            'slug': slug,
            'type': type,
            'options': options,
            'enabled': enabled,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_attributes_controller_get_organization_attribute(self, orgId, attributeId) -> dict[str, Any]:
        """
        Retrieves a specific attribute for an organization based on the provided orgId and attributeId.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_attributes_controller_update_organization_attribute(self, orgId, attributeId, name=None, slug=None, type=None, enabled=None) -> dict[str, Any]:
        """
        Modifies an attribute of an organization using the PATCH method, updating the specified attribute by ID within the given organization.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId
            name (string): name
            slug (string): slug
            type (string): type
            enabled (boolean): enabled

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        request_body = {
            'name': name,
            'slug': slug,
            'type': type,
            'enabled': enabled,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_attributes_controller_delete_organization_attribute(self, orgId, attributeId) -> dict[str, Any]:
        """
        Deletes a specified attribute from an organization using the provided orgId and attributeId path parameters.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_create_organization_attribute_option(self, orgId, attributeId, value, slug) -> dict[str, Any]:
        """
        Creates a new option for the specified attribute in the given organization and returns the created resource.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId
            value (string): value
            slug (string): slug

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        request_body = {
            'value': value,
            'slug': slug,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}/options"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_get_organization_attribute_options(self, orgId, attributeId) -> dict[str, Any]:
        """
        Retrieves options for a specific attribute within an organization using the "GET" method at the "/v2/organizations/{orgId}/attributes/{attributeId}/options" endpoint.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}/options"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_delete_organization_attribute_option(self, orgId, attributeId, optionId) -> dict[str, Any]:
        """
        Deletes a specific attribute option for an organization's custom attributes using the provided orgId, attributeId, and optionId.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId
            optionId (string): optionId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        if optionId is None:
            raise ValueError("Missing required parameter 'optionId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}/options/{optionId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_update_organization_attribute_option(self, orgId, attributeId, optionId, value=None, slug=None) -> dict[str, Any]:
        """
        Updates a specific option for an organization's attribute using partial modifications.

        Args:
            orgId (string): orgId
            attributeId (string): attributeId
            optionId (string): optionId
            value (string): value
            slug (string): slug

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if attributeId is None:
            raise ValueError("Missing required parameter 'attributeId'")
        if optionId is None:
            raise ValueError("Missing required parameter 'optionId'")
        request_body = {
            'value': value,
            'slug': slug,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/{attributeId}/options/{optionId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_assign_organization_attribute_option_to_user(self, orgId, userId, attributeId, value=None, attributeOptionId=None) -> dict[str, Any]:
        """
        Assigns attribute options to a user within an organization using the POST method and returns a creation status.

        Args:
            orgId (string): orgId
            userId (string): userId
            attributeId (string): attributeId
            value (string): value
            attributeOptionId (string): attributeOptionId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        request_body = {
            'value': value,
            'attributeOptionId': attributeOptionId,
            'attributeId': attributeId,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/options/{userId}"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_get_organization_attribute_options_for_user(self, orgId, userId) -> dict[str, Any]:
        """
        Retrieves attribute options for a specified user within an organization using the "GET" method.

        Args:
            orgId (string): orgId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/options/{userId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_options_attributes_controller_unassign_organization_attribute_option_from_user(self, orgId, userId, attributeOptionId) -> dict[str, Any]:
        """
        Deletes a specific attribute option for a user within an organization via the provided path parameters.

        Args:
            orgId (string): orgId
            userId (string): userId
            attributeOptionId (string): attributeOptionId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Attributes / Options
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        if attributeOptionId is None:
            raise ValueError("Missing required parameter 'attributeOptionId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/attributes/options/{userId}/{attributeOptionId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_event_types_controller_create_team_event_type(self, orgId, teamId, lengthInMinutes, lengthInMinutesOptions, title, slug, schedulingType, hosts, description=None, locations=None, bookingFields=None, disableGuests=None, slotInterval=None, minimumBookingNotice=None, beforeEventBuffer=None, afterEventBuffer=None, scheduleId=None, bookingLimitsCount=None, onlyShowFirstAvailableSlot=None, bookingLimitsDuration=None, bookingWindow=None, offsetStart=None, bookerLayouts=None, confirmationPolicy=None, recurrence=None, requiresBookerEmailVerification=None, hideCalendarNotes=None, lockTimeZoneToggleOnBookingPage=None, color=None, seats=None, customName=None, destinationCalendar=None, useDestinationCalendarEmail=None, hideCalendarEventDetails=None, successRedirectUrl=None, assignAllTeamMembers=None) -> dict[str, Any]:
        """
        Creates a new event type within a specified team and organization.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            lengthInMinutes (number): lengthInMinutes Example: '60'.
            lengthInMinutesOptions (array): If you want that user can choose between different lengths of the event you can specify them here. Must include the provided `lengthInMinutes`. Example: '[15, 30, 60]'.
            title (string): title Example: 'Learn the secrets of masterchief!'.
            slug (string): slug Example: 'learn-the-secrets-of-masterchief'.
            schedulingType (object): schedulingType
            hosts (array): hosts
            description (string): description Example: 'Discover the culinary wonders of the Argentina by making the best flan ever!'.
            locations (array): Locations where the event will take place. If not provided, cal video link will be used as the location.
            bookingFields (array): Custom fields that can be added to the booking form when the event is booked by someone. By default booking form has name and email field.
            disableGuests (boolean): If true, person booking this event't cant add guests via their emails.
            slotInterval (number): Number representing length of each slot when event is booked. By default it equal length of the event type.
              If event length is 60 minutes then we would have slots 9AM, 10AM, 11AM etc. but if it was changed to 30 minutes then
              we would have slots 9AM, 9:30AM, 10AM, 10:30AM etc. as the available times to book the 60 minute event.
            minimumBookingNotice (number): Minimum number of minutes before the event that a booking can be made.
            beforeEventBuffer (number): Time spaces that can be pre-pended before an event to give more time before it.
            afterEventBuffer (number): Time spaces that can be appended after an event to give more time after it.
            scheduleId (number): If you want that this event has different schedule than user's default one you can specify it here.
            bookingLimitsCount (string): Limit how many times this event can be booked
            onlyShowFirstAvailableSlot (boolean): This will limit your availability for this event type to one slot per day, scheduled at the earliest available time.
            bookingLimitsDuration (string): Limit total amount of time that this event can be booked
            bookingWindow (string): Limit how far in the future this event can be booked
            offsetStart (number): Offset timeslots shown to bookers by a specified number of minutes
            bookerLayouts (string): Should booker have week, month or column view. Specify default layout and enabled layouts user can pick.
            confirmationPolicy (string): Specify how the booking needs to be manually confirmed before it is pushed to the integrations and a confirmation mail is sent.
            recurrence (string): Create a recurring event type.
            requiresBookerEmailVerification (boolean): requiresBookerEmailVerification
            hideCalendarNotes (boolean): hideCalendarNotes
            lockTimeZoneToggleOnBookingPage (boolean): lockTimeZoneToggleOnBookingPage
            color (object): color
            seats (string): Create an event type with multiple seats.
            customName (string): Customizable event name with valid variables: 
              {Event type title}, {Organiser}, {Scheduler}, {Location}, {Organiser first name}, 
              {Scheduler first name}, {Scheduler last name}, {Event duration}, {LOCATION}, 
              {HOST/ATTENDEE}, {HOST}, {ATTENDEE}, {USER} Example: '{Event type title} between {Organiser} and {Scheduler}'.
            destinationCalendar (object): destinationCalendar
            useDestinationCalendarEmail (boolean): useDestinationCalendarEmail
            hideCalendarEventDetails (boolean): hideCalendarEventDetails
            successRedirectUrl (string): A valid URL where the booker will redirect to, once the booking is completed successfully Example: 'https://masterchief.com/argentina/flan/video/9129412'.
            assignAllTeamMembers (boolean): If true, all current and future team members will be assigned to this event type

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Event Types
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        request_body = {
            'lengthInMinutes': lengthInMinutes,
            'lengthInMinutesOptions': lengthInMinutesOptions,
            'title': title,
            'slug': slug,
            'description': description,
            'locations': locations,
            'bookingFields': bookingFields,
            'disableGuests': disableGuests,
            'slotInterval': slotInterval,
            'minimumBookingNotice': minimumBookingNotice,
            'beforeEventBuffer': beforeEventBuffer,
            'afterEventBuffer': afterEventBuffer,
            'scheduleId': scheduleId,
            'bookingLimitsCount': bookingLimitsCount,
            'onlyShowFirstAvailableSlot': onlyShowFirstAvailableSlot,
            'bookingLimitsDuration': bookingLimitsDuration,
            'bookingWindow': bookingWindow,
            'offsetStart': offsetStart,
            'bookerLayouts': bookerLayouts,
            'confirmationPolicy': confirmationPolicy,
            'recurrence': recurrence,
            'requiresBookerEmailVerification': requiresBookerEmailVerification,
            'hideCalendarNotes': hideCalendarNotes,
            'lockTimeZoneToggleOnBookingPage': lockTimeZoneToggleOnBookingPage,
            'color': color,
            'seats': seats,
            'customName': customName,
            'destinationCalendar': destinationCalendar,
            'useDestinationCalendarEmail': useDestinationCalendarEmail,
            'hideCalendarEventDetails': hideCalendarEventDetails,
            'successRedirectUrl': successRedirectUrl,
            'schedulingType': schedulingType,
            'hosts': hosts,
            'assignAllTeamMembers': assignAllTeamMembers,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/event-types"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_event_types_controller_get_team_event_types(self, orgId, teamId, eventSlug=None) -> dict[str, Any]:
        """
        Retrieves event types for a specific team within an organization using the "GET" method at the "/v2/organizations/{orgId}/teams/{teamId}/event-types" endpoint, optionally filtering by event slug.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            eventSlug (string): Slug of team event type to return.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Event Types
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/event-types"
        query_params = {k: v for k, v in [('eventSlug', eventSlug)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_event_types_controller_get_team_event_type(self, orgId, teamId, eventTypeId) -> dict[str, Any]:
        """
        Retrieves details about a specific event type within a team of an organization using the provided organization ID, team ID, and event type ID.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            eventTypeId (string): eventTypeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Event Types
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/event-types/{eventTypeId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_event_types_controller_create_phone_call(self, orgId, teamId, eventTypeId, yourPhoneNumber, numberToCall, calApiKey, enabled, templateType, schedulerName=None, guestName=None, guestEmail=None, guestCompany=None, beginMessage=None, generalPrompt=None) -> dict[str, Any]:
        """
        Initiates a phone call for a specific event type under an organization's team context and returns a 201 Created response upon successful creation.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            eventTypeId (string): eventTypeId
            yourPhoneNumber (string): Your phone number
            numberToCall (string): Number to call
            calApiKey (string): CAL API Key
            enabled (object): Enabled status
            templateType (string): Template type
            schedulerName (string): Scheduler name
            guestName (string): Guest name
            guestEmail (string): Guest email
            guestCompany (string): Guest company
            beginMessage (string): Begin message
            generalPrompt (string): General prompt

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Event Types
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        request_body = {
            'yourPhoneNumber': yourPhoneNumber,
            'numberToCall': numberToCall,
            'calApiKey': calApiKey,
            'enabled': enabled,
            'templateType': templateType,
            'schedulerName': schedulerName,
            'guestName': guestName,
            'guestEmail': guestEmail,
            'guestCompany': guestCompany,
            'beginMessage': beginMessage,
            'generalPrompt': generalPrompt,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/event-types/{eventTypeId}/create-phone-call"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_event_types_controller_get_teams_event_types(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of event types for teams within a specified organization.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Event Types
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/event-types"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_memberships_controller_get_all_memberships(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of memberships for an organization identified by the specified `orgId`, allowing pagination through optional `take` and `skip` query parameters.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/memberships"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_memberships_controller_create_membership(self, orgId, userId, role, accepted=False, disableImpersonation=False) -> dict[str, Any]:
        """
        Creates a new membership for an organization identified by {orgId} using the API.

        Args:
            orgId (string): orgId
            userId (number): userId
            role (string): role
            accepted (boolean): accepted
            disableImpersonation (boolean): disableImpersonation

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        request_body = {
            'userId': userId,
            'accepted': accepted,
            'role': role,
            'disableImpersonation': disableImpersonation,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/memberships"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_memberships_controller_get_org_membership(self, orgId, membershipId) -> dict[str, Any]:
        """
        Retrieves membership details for a specific organization membership using the provided organization ID and membership ID.

        Args:
            orgId (string): orgId
            membershipId (string): membershipId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/memberships/{membershipId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_memberships_controller_delete_membership(self, orgId, membershipId) -> dict[str, Any]:
        """
        Removes a user's membership from the specified organization by deleting the membership record at the given path.

        Args:
            orgId (string): orgId
            membershipId (string): membershipId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/memberships/{membershipId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_memberships_controller_update_membership(self, orgId, membershipId, accepted=None, role=None, disableImpersonation=None) -> dict[str, Any]:
        """
        Updates an organization membership's details using the PATCH method and returns the updated membership data.

        Args:
            orgId (string): orgId
            membershipId (string): membershipId
            accepted (boolean): accepted
            role (string): role
            disableImpersonation (boolean): disableImpersonation

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        request_body = {
            'accepted': accepted,
            'role': role,
            'disableImpersonation': disableImpersonation,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/memberships/{membershipId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_schedules_controller_get_organization_schedules(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of schedules for the specified organization, using pagination parameters to limit results.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/schedules"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_schedules_controller_create_user_schedule(self, orgId, userId, name, timeZone, isDefault, availability=None, overrides=None) -> dict[str, Any]:
        """
        Creates a schedule for the specified user within an organization and returns a success status upon creation.

        Args:
            orgId (string): orgId
            userId (string): userId
            name (string): name Example: 'Catch up hours'.
            timeZone (string): Timezone is used to calculate available times when an event using the schedule is booked. Example: 'Europe/Rome'.
            isDefault (boolean): Each user should have 1 default schedule. If you specified `timeZone` when creating managed user, then the default schedule will be created with that timezone.
            Default schedule means that if an event type is not tied to a specific schedule then the default schedule is used. Example: 'True'.
            availability (array): Each object contains days and times when the user is available. If not passed, the default availability is Monday to Friday from 09:00 to 17:00. Example: "[{'days': ['Monday', 'Tuesday'], 'startTime': '17:00', 'endTime': '19:00'}, {'days': ['Wednesday', 'Thursday'], 'startTime': '16:00', 'endTime': '20:00'}]".
            overrides (array): Need to change availability for a specific date? Add an override. Example: "[{'date': '2024-05-20', 'startTime': '18:00', 'endTime': '21:00'}]".

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Schedules, Orgs / Users / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        request_body = {
            'name': name,
            'timeZone': timeZone,
            'availability': availability,
            'isDefault': isDefault,
            'overrides': overrides,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/users/{userId}/schedules"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_schedules_controller_get_user_schedules(self, orgId, userId) -> dict[str, Any]:
        """
        Retrieves a user's schedule for a specific organization using the GET method.

        Args:
            orgId (string): orgId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Schedules, Orgs / Users / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/users/{userId}/schedules"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_schedules_controller_get_user_schedule(self, orgId, userId, scheduleId) -> dict[str, Any]:
        """
        Retrieves the specified schedule for a user within an organization.

        Args:
            orgId (string): orgId
            userId (string): userId
            scheduleId (string): scheduleId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Schedules, Orgs / Users / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        if scheduleId is None:
            raise ValueError("Missing required parameter 'scheduleId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/users/{userId}/schedules/{scheduleId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_schedules_controller_update_user_schedule(self, orgId, userId, scheduleId, name=None, timeZone=None, availability=None, isDefault=None, overrides=None) -> dict[str, Any]:
        """
        Updates a user's schedule for a specified organization by applying partial modifications to the schedule's details using the PATCH method.

        Args:
            orgId (string): orgId
            userId (string): userId
            scheduleId (string): scheduleId
            name (string): name Example: 'One-on-one coaching'.
            timeZone (string): timeZone Example: 'Europe/Rome'.
            availability (array): availability Example: "[{'days': ['Monday', 'Tuesday'], 'startTime': '09:00', 'endTime': '10:00'}]".
            isDefault (boolean): isDefault Example: 'True'.
            overrides (array): overrides Example: "[{'date': '2024-05-20', 'startTime': '12:00', 'endTime': '14:00'}]".

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Schedules, Orgs / Users / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        if scheduleId is None:
            raise ValueError("Missing required parameter 'scheduleId'")
        request_body = {
            'name': name,
            'timeZone': timeZone,
            'availability': availability,
            'isDefault': isDefault,
            'overrides': overrides,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/users/{userId}/schedules/{scheduleId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_schedules_controller_delete_user_schedule(self, orgId, userId, scheduleId) -> dict[str, Any]:
        """
        Deletes a specific schedule for a user within an organization and returns a success status.

        Args:
            orgId (string): orgId
            userId (string): userId
            scheduleId (string): scheduleId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Schedules, Orgs / Users / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        if scheduleId is None:
            raise ValueError("Missing required parameter 'scheduleId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/users/{userId}/schedules/{scheduleId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_controller_get_all_teams(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of teams for a specified organization using the provided orgId, with optional pagination control via take and skip parameters.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams, Teams
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_controller_create_team(self, orgId, name, slug=None, logoUrl=None, calVideoLogo=None, appLogo=None, appIconLogo=None, bio=None, hideBranding=False, isPrivate=None, hideBookATeamMember=None, metadata=None, theme=None, brandColor=None, darkBrandColor=None, bannerUrl=None, timeFormat=None, timeZone="Europe/London", weekStart="Sunday", autoAcceptCreator=True) -> dict[str, Any]:
        """
        Creates a new team within the specified organization using the provided organization ID and returns a success status upon creation.

        Args:
            orgId (string): orgId
            name (string): Name of the team Example: 'CalTeam'.
            slug (string): Team slug Example: 'caltel'.
            logoUrl (string): URL of the teams logo image Example: 'https://i.cal.com/api/avatar/b0b58752-68ad-4c0d-8024-4fa382a77752.png'.
            calVideoLogo (string): calVideoLogo
            appLogo (string): appLogo
            appIconLogo (string): appIconLogo
            bio (string): bio
            hideBranding (boolean): hideBranding
            isPrivate (boolean): isPrivate
            hideBookATeamMember (boolean): hideBookATeamMember
            metadata (string): metadata
            theme (string): theme
            brandColor (string): brandColor
            darkBrandColor (string): darkBrandColor
            bannerUrl (string): URL of the teams banner image which is shown on booker Example: 'https://i.cal.com/api/avatar/949be534-7a88-4185-967c-c020b0c0bef3.png'.
            timeFormat (number): timeFormat
            timeZone (string): Timezone is used to create teams's default schedule from Monday to Friday from 9AM to 5PM. It will default to Europe/London if not passed. Example: 'America/New_York'.
            weekStart (string): weekStart Example: 'Monday'.
            autoAcceptCreator (boolean): autoAcceptCreator

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams, important
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        request_body = {
            'name': name,
            'slug': slug,
            'logoUrl': logoUrl,
            'calVideoLogo': calVideoLogo,
            'appLogo': appLogo,
            'appIconLogo': appIconLogo,
            'bio': bio,
            'hideBranding': hideBranding,
            'isPrivate': isPrivate,
            'hideBookATeamMember': hideBookATeamMember,
            'metadata': metadata,
            'theme': theme,
            'brandColor': brandColor,
            'darkBrandColor': darkBrandColor,
            'bannerUrl': bannerUrl,
            'timeFormat': timeFormat,
            'timeZone': timeZone,
            'weekStart': weekStart,
            'autoAcceptCreator': autoAcceptCreator,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/teams"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_controller_get_my_teams(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves the teams for the current user within a specified organization using the "GET" method, optionally allowing pagination through query parameters.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/me"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_controller_get_team(self, orgId, teamId) -> dict[str, Any]:
        """
        Retrieves information about a specific team within an organization using the organization and team IDs.

        Args:
            orgId (string): orgId
            teamId (string): teamId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_controller_delete_team(self, orgId, teamId) -> dict[str, Any]:
        """
        Deletes a specific team within an organization and returns a success status upon completion.

        Args:
            orgId (string): orgId
            teamId (string): teamId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_controller_update_team(self, orgId, teamId, name=None, slug=None, logoUrl=None, calVideoLogo=None, appLogo=None, appIconLogo=None, bio=None, hideBranding=None, isPrivate=None, hideBookATeamMember=None, metadata=None, theme=None, brandColor=None, darkBrandColor=None, bannerUrl=None, timeFormat=None, timeZone=None, weekStart=None, bookingLimits=None, includeManagedEventsInLimits=None) -> dict[str, Any]:
        """
        Updates the specified team properties within an organization using partial modifications.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            name (string): Name of the team Example: 'CalTeam'.
            slug (string): Team slug Example: 'caltel'.
            logoUrl (string): URL of the teams logo image Example: 'https://i.cal.com/api/avatar/b0b58752-68ad-4c0d-8024-4fa382a77752.png'.
            calVideoLogo (string): calVideoLogo
            appLogo (string): appLogo
            appIconLogo (string): appIconLogo
            bio (string): bio
            hideBranding (boolean): hideBranding
            isPrivate (boolean): isPrivate
            hideBookATeamMember (boolean): hideBookATeamMember
            metadata (string): metadata
            theme (string): theme
            brandColor (string): brandColor
            darkBrandColor (string): darkBrandColor
            bannerUrl (string): URL of the teams banner image which is shown on booker Example: 'https://i.cal.com/api/avatar/949be534-7a88-4185-967c-c020b0c0bef3.png'.
            timeFormat (number): timeFormat
            timeZone (string): Timezone is used to create teams's default schedule from Monday to Friday from 9AM to 5PM. It will default to Europe/London if not passed. Example: 'America/New_York'.
            weekStart (string): weekStart Example: 'Monday'.
            bookingLimits (string): bookingLimits
            includeManagedEventsInLimits (boolean): includeManagedEventsInLimits

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        request_body = {
            'name': name,
            'slug': slug,
            'logoUrl': logoUrl,
            'calVideoLogo': calVideoLogo,
            'appLogo': appLogo,
            'appIconLogo': appIconLogo,
            'bio': bio,
            'hideBranding': hideBranding,
            'isPrivate': isPrivate,
            'hideBookATeamMember': hideBookATeamMember,
            'metadata': metadata,
            'theme': theme,
            'brandColor': brandColor,
            'darkBrandColor': darkBrandColor,
            'bannerUrl': bannerUrl,
            'timeFormat': timeFormat,
            'timeZone': timeZone,
            'weekStart': weekStart,
            'bookingLimits': bookingLimits,
            'includeManagedEventsInLimits': includeManagedEventsInLimits,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_memberships_controller_get_all_org_team_memberships(self, orgId, teamId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of memberships for a specified team within an organization, using path parameters for orgId and teamId, and query parameters for pagination (take and skip).

        Args:
            orgId (string): orgId
            teamId (string): teamId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/memberships"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_memberships_controller_create_org_team_membership(self, orgId, teamId, userId, role, accepted=False, disableImpersonation=False) -> dict[str, Any]:
        """
        Adds a member to the specified team within an organization and returns the membership details.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            userId (number): userId
            role (string): role
            accepted (boolean): accepted
            disableImpersonation (boolean): disableImpersonation

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        request_body = {
            'userId': userId,
            'accepted': accepted,
            'role': role,
            'disableImpersonation': disableImpersonation,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/memberships"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_memberships_controller_get_org_team_membership(self, orgId, teamId, membershipId) -> dict[str, Any]:
        """
        Retrieves a specific membership record for a team within an organization, identified by membership ID, team ID, and organization ID.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            membershipId (string): membershipId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/memberships/{membershipId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_memberships_controller_delete_org_team_membership(self, orgId, teamId, membershipId) -> dict[str, Any]:
        """
        Removes a user's team membership in an organization using the specified organization, team, and membership identifiers.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            membershipId (string): membershipId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/memberships/{membershipId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_memberships_controller_update_org_team_membership(self, orgId, teamId, membershipId, accepted=None, role=None, disableImpersonation=None) -> dict[str, Any]:
        """
        Updates membership details for a specific organization team member using partial modifications and returns a success status.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            membershipId (string): membershipId
            accepted (boolean): accepted
            role (string): role
            disableImpersonation (boolean): disableImpersonation

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams / Memberships
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        request_body = {
            'accepted': accepted,
            'role': role,
            'disableImpersonation': disableImpersonation,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/memberships/{membershipId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_teams_schedules_controller_get_user_schedules(self, orgId, teamId, userId) -> dict[str, Any]:
        """
        Retrieves the schedule details for a specific user within a designated team and organization.

        Args:
            orgId (string): orgId
            teamId (string): teamId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Teams / Schedules, Orgs / Teams / Users / Schedules
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/teams/{teamId}/users/{userId}/schedules"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_users_controller_get_organizations_users(self, orgId, take=None, skip=None, emails=None) -> dict[str, Any]:
        """
        Retrieves a list of users for a specified organization, allowing filtering by take, skip, and emails parameters, using the GET method on the "/v2/organizations/{orgId}/users" endpoint.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.
            emails (array): The email address or an array of email addresses to filter by

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Users
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/users"
        query_params = {k: v for k, v in [('take', take), ('skip', skip), ('emails', emails)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_users_controller_create_organization_user(self, orgId, email, username=None, weekday=None, brandColor=None, darkBrandColor=None, hideBranding=None, timeZone=None, theme=None, appTheme=None, timeFormat=None, defaultScheduleId=None, locale="en", avatarUrl=None, organizationRole="MEMBER", autoAccept=True) -> dict[str, Any]:
        """
        Creates a new user within an organization using the provided organization ID.

        Args:
            orgId (string): orgId
            email (string): User email address Example: 'user@example.com'.
            username (string): Username Example: 'user123'.
            weekday (string): Preferred weekday Example: 'Monday'.
            brandColor (string): Brand color in HEX format Example: '#FFFFFF'.
            darkBrandColor (string): Dark brand color in HEX format Example: '#000000'.
            hideBranding (boolean): Hide branding Example: 'False'.
            timeZone (string): Time zone Example: 'America/New_York'.
            theme (string): Theme Example: 'dark'.
            appTheme (string): Application theme Example: 'light'.
            timeFormat (number): Time format Example: '24'.
            defaultScheduleId (number): Default schedule ID Example: '1'.
            locale (string): Locale Example: 'en'.
            avatarUrl (string): Avatar URL Example: 'https://example.com/avatar.jpg'.
            organizationRole (string): organizationRole
            autoAccept (boolean): autoAccept

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Users
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        request_body = {
            'email': email,
            'username': username,
            'weekday': weekday,
            'brandColor': brandColor,
            'darkBrandColor': darkBrandColor,
            'hideBranding': hideBranding,
            'timeZone': timeZone,
            'theme': theme,
            'appTheme': appTheme,
            'timeFormat': timeFormat,
            'defaultScheduleId': defaultScheduleId,
            'locale': locale,
            'avatarUrl': avatarUrl,
            'organizationRole': organizationRole,
            'autoAccept': autoAccept,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/users"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_users_controller_delete_organization_user(self, orgId, userId) -> dict[str, Any]:
        """
        Deletes a user with the specified user ID from an organization identified by the provided organization ID using the DELETE method, returning a status message upon success.

        Args:
            orgId (string): orgId
            userId (string): userId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Users
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/users/{userId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_webhooks_controller_get_all_organization_webhooks(self, orgId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of webhooks for the specified organization, supporting pagination through skip and take parameters.

        Args:
            orgId (string): orgId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Webhooks
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/webhooks"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_webhooks_controller_create_organization_webhook(self, orgId, active, subscriberUrl, triggers, payloadTemplate=None, secret=None) -> dict[str, Any]:
        """
        Creates an organization webhook that triggers HTTP POST payloads for specified events and returns a success status on creation.

        Args:
            orgId (string): orgId
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Webhooks
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/webhooks"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_webhooks_controller_get_organization_webhook(self, orgId, webhookId) -> dict[str, Any]:
        """
        Retrieves information about a specific webhook identified by `webhookId` for an organization specified by `orgId`.

        Args:
            orgId (string): orgId
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Webhooks
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/webhooks/{webhookId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_webhooks_controller_delete_webhook(self, orgId, webhookId) -> dict[str, Any]:
        """
        Deletes a specified webhook from an organization using the provided organization and webhook identifiers.

        Args:
            orgId (string): orgId
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Webhooks
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/organizations/{orgId}/webhooks/{webhookId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def organizations_webhooks_controller_update_org_webhook(self, orgId, webhookId, payloadTemplate=None, active=None, subscriberUrl=None, triggers=None, secret=None) -> dict[str, Any]:
        """
        Updates a specific webhook for an organization using partial modifications via the PATCH method.

        Args:
            orgId (string): orgId
            webhookId (string): webhookId
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Orgs / Webhooks
        """
        if orgId is None:
            raise ValueError("Missing required parameter 'orgId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/organizations/{orgId}/webhooks/{webhookId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_get_bookings(self, status=None, attendeeEmail=None, attendeeName=None, eventTypeIds=None, eventTypeId=None, teamsIds=None, teamId=None, afterStart=None, beforeEnd=None, sortStart=None, sortEnd=None, sortCreated=None, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a filtered list of bookings based on parameters like status, attendee details, event types, time ranges, and pagination settings.

        Args:
            status (array): Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma. Example: '?status=upcoming,past'.
            attendeeEmail (string): Filter bookings by the attendee's email address. Example: 'example@domain.com'.
            attendeeName (string): Filter bookings by the attendee's name. Example: 'John Doe'.
            eventTypeIds (string): Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma. Example: '?eventTypeIds=100,200'.
            eventTypeId (string): Filter bookings by event type id belonging to the user. Example: '?eventTypeId=100'.
            teamsIds (string): Filter bookings by team ids that user is part of. Team ids must be separated by a comma. Example: '?teamIds=50,60'.
            teamId (string): Filter bookings by team id that user is part of Example: '?teamId=50'.
            afterStart (string): Filter bookings with start after this date string. Example: '?afterStart=2025-03-07T10:00:00.000Z'.
            beforeEnd (string): Filter bookings with end before this date string. Example: '?beforeEnd=2025-03-07T11:00:00.000Z'.
            sortStart (string): Sort results by their start time in ascending or descending order. Example: '?sortStart=asc OR ?sortStart=desc'.
            sortEnd (string): Sort results by their end time in ascending or descending order. Example: '?sortEnd=asc OR ?sortEnd=desc'.
            sortCreated (string): Sort results by their creation time (when booking was made) in ascending or descending order. Example: '?sortCreated=asc OR ?sortCreated=desc'.
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        url = f"{self.base_url}/v2/bookings"
        query_params = {k: v for k, v in [('status', status), ('attendeeEmail', attendeeEmail), ('attendeeName', attendeeName), ('eventTypeIds', eventTypeIds), ('eventTypeId', eventTypeId), ('teamsIds', teamsIds), ('teamId', teamId), ('afterStart', afterStart), ('beforeEnd', beforeEnd), ('sortStart', sortStart), ('sortEnd', sortEnd), ('sortCreated', sortCreated), ('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_get_booking(self, bookingUid) -> dict[str, Any]:
        """
        Retrieves the details of a specific booking using its unique identifier.

        Args:
            bookingUid (string): bookingUid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        url = f"{self.base_url}/v2/bookings/{bookingUid}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_reschedule_booking(self, bookingUid) -> dict[str, Any]:
        """
        Reschedules an existing booking identified by its unique `bookingUid`, using the `POST` method at the "/v2/bookings/{bookingUid}/reschedule" endpoint.

        Args:
            bookingUid (string): bookingUid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        url = f"{self.base_url}/v2/bookings/{bookingUid}/reschedule"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_cancel_booking(self, bookingUid) -> dict[str, Any]:
        """
        Cancels a booking by sending a POST request to the "/v2/bookings/{bookingUid}/cancel" endpoint, using the provided booking UID to identify the booking to be canceled.

        Args:
            bookingUid (string): bookingUid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        url = f"{self.base_url}/v2/bookings/{bookingUid}/cancel"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_mark_no_show(self, bookingUid, host=None, attendees=None) -> dict[str, Any]:
        """
        Marks a booking as absent using the provided booking UID and authentication token, indicating that the owner of the booking is absent.

        Args:
            bookingUid (string): bookingUid
            host (boolean): Whether the host was absent Example: 'False'.
            attendees (array): attendees

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        request_body = {
            'host': host,
            'attendees': attendees,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/bookings/{bookingUid}/mark-absent"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_reassign_booking(self, bookingUid) -> dict[str, Any]:
        """
        Reassigns a booking to a different team member or booking page via a POST request to the specified booking UID, potentially allowing double bookings if availability conflicts exist.

        Args:
            bookingUid (string): bookingUid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        url = f"{self.base_url}/v2/bookings/{bookingUid}/reassign"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_reassign_booking_to_user(self, bookingUid, userId, reason=None) -> dict[str, Any]:
        """
        Reassigns a booking to a specific user specified by the `userId` using a POST request, requiring authorization and providing a reason for the reassignment.

        Args:
            bookingUid (string): bookingUid
            userId (string): userId
            reason (string): Reason for reassigning the booking Example: 'Host has to take another call'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        if userId is None:
            raise ValueError("Missing required parameter 'userId'")
        request_body = {
            'reason': reason,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/bookings/{bookingUid}/reassign/{userId}"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_confirm_booking(self, bookingUid) -> dict[str, Any]:
        """
        Confirms a specific booking by its unique identifier and returns a success status upon completion.

        Args:
            bookingUid (string): bookingUid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        url = f"{self.base_url}/v2/bookings/{bookingUid}/confirm"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def bookings_controller_2024_08_13_decline_booking(self, bookingUid, reason=None) -> dict[str, Any]:
        """
        Declines a specific booking identified by the bookingUid using the Booking.com API and returns a success status upon completion.

        Args:
            bookingUid (string): bookingUid
            reason (string): Reason for declining a booking that requires a confirmation Example: 'Host has to take another call'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Bookings
        """
        if bookingUid is None:
            raise ValueError("Missing required parameter 'bookingUid'")
        request_body = {
            'reason': reason,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/bookings/{bookingUid}/decline"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_create_ics_feed(self, urls, readOnly=True) -> dict[str, Any]:
        """
        Saves an ICS calendar feed configuration and returns the created resource.

        Args:
            urls (array): An array of ICS URLs Example: "['https://cal.com/ics/feed.ics', 'http://cal.com/ics/feed.ics']".
            readOnly (boolean): Whether to allowing writing to the calendar or not Example: 'False'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        request_body = {
            'urls': urls,
            'readOnly': readOnly,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/calendars/ics-feed/save"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_check_ics_feed(self) -> dict[str, Any]:
        """
        Checks the status and validity of an ICS calendar feed.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        url = f"{self.base_url}/v2/calendars/ics-feed/check"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_get_busy_times(self, loggedInUsersTz, credentialId, externalId, dateFrom=None, dateTo=None) -> dict[str, Any]:
        """
        Retrieves a list of busy times for specified calendars within a given date range using the "GET" method at "/v2/calendars/busy-times," allowing for time zone and credential specification.

        Args:
            loggedInUsersTz (string): The timezone of the logged in user represented as a string Example: 'America/New_York'.
            credentialId (number): A unique identifier for the credential associated with the request, used to authenticate or authorize access when retrieving busy times for calendars.
            externalId (string): The `externalId` query parameter uniquely identifies a user or resource in an external system to retrieve their busy calendar times.
            dateFrom (string): The starting date for the busy times query Example: '2023-10-01'.
            dateTo (string): The ending date for the busy times query Example: '2023-10-31'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        url = f"{self.base_url}/v2/calendars/busy-times"
        query_params = {k: v for k, v in [('loggedInUsersTz', loggedInUsersTz), ('dateFrom', dateFrom), ('dateTo', dateTo), ('credentialId', credentialId), ('externalId', externalId)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_get_calendars(self) -> dict[str, Any]:
        """
        Retrieves a list of calendars using the API at the "/v2/calendars" endpoint via the GET method.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        url = f"{self.base_url}/v2/calendars"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_redirect(self, calendar) -> dict[str, Any]:
        """
        Retrieves a connection status for the specified calendar at path "/v2/calendars/{calendar}/connect" using the GET method, requiring authorization and calendar identifier.

        Args:
            calendar (string): calendar

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        if calendar is None:
            raise ValueError("Missing required parameter 'calendar'")
        url = f"{self.base_url}/v2/calendars/{calendar}/connect"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_save(self, calendar, state, code) -> Any:
        """
        Retrieves the saved state of a specified calendar using the given parameters.

        Args:
            calendar (string): calendar
            state (string): Optional query parameter to specify additional context or application state for the calendar save operation.
            code (string): Optional code query parameter used to specify additional context or identifier for saving a calendar.

        Returns:
            Any: API response data.

        Tags:
            Calendars
        """
        if calendar is None:
            raise ValueError("Missing required parameter 'calendar'")
        url = f"{self.base_url}/v2/calendars/{calendar}/save"
        query_params = {k: v for k, v in [('state', state), ('code', code)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_sync_credentials(self, calendar) -> Any:
        """
        Creates credentials for a specified Google Calendar using the POST method at the "/v2/calendars/{calendar}/credentials" path.

        Args:
            calendar (string): calendar

        Returns:
            Any: API response data.

        Tags:
            Calendars
        """
        if calendar is None:
            raise ValueError("Missing required parameter 'calendar'")
        url = f"{self.base_url}/v2/calendars/{calendar}/credentials"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_check(self, calendar) -> dict[str, Any]:
        """
        Checks the status or availability of a specified calendar using the "GET" method at the "/v2/calendars/{calendar}/check" endpoint.

        Args:
            calendar (string): calendar

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        if calendar is None:
            raise ValueError("Missing required parameter 'calendar'")
        url = f"{self.base_url}/v2/calendars/{calendar}/check"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def calendars_controller_delete_calendar_credentials(self, calendar, id) -> dict[str, Any]:
        """
        Disconnects a specified calendar from a user's account using the Cal.com API, requiring a POST request to the "/v2/calendars/{calendar}/disconnect" endpoint with the calendar type and credential ID in the request body.

        Args:
            calendar (string): calendar
            id (integer): Credential ID of the calendar to delete, as returned by the /calendars endpoint Example: '10'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Calendars
        """
        if calendar is None:
            raise ValueError("Missing required parameter 'calendar'")
        request_body = {
            'id': id,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/calendars/{calendar}/disconnect"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_connect(self, app) -> dict[str, Any]:
        """
        Establishes a connection for conferencing using the specified application via the POST method at the "/v2/conferencing/{app}/connect" endpoint.

        Args:
            app (string): app

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Conferencing
        """
        if app is None:
            raise ValueError("Missing required parameter 'app'")
        url = f"{self.base_url}/v2/conferencing/{app}/connect"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_redirect(self, app, returnTo, onErrorReturnTo) -> dict[str, Any]:
        """
        Generates an authorization URL for OAuth in a conferencing application using the "GET" method at the "/v2/conferencing/{app}/oauth/auth-url" path, accepting parameters such as the application name and return URLs.

        Args:
            app (string): app
            returnTo (string): Specifies the URL to redirect to after the OAuth authentication process completes.
            onErrorReturnTo (string): URL to redirect to when an error occurs during the authorization flow, allowing for error handling and fallback behavior.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Conferencing
        """
        if app is None:
            raise ValueError("Missing required parameter 'app'")
        url = f"{self.base_url}/v2/conferencing/{app}/oauth/auth-url"
        query_params = {k: v for k, v in [('returnTo', returnTo), ('onErrorReturnTo', onErrorReturnTo)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_save(self, app, state, code) -> Any:
        """
        Handles OAuth authorization callbacks for conferencing applications, processing authorization codes and states to authenticate users via the "GET" method.

        Args:
            app (string): app
            state (string): A CSRF protection token passed between authorization request and callback, used to verify request authenticity and optionally maintain application state.
            code (string): Authorization code returned from the OAuth provider after user authentication.

        Returns:
            Any: API response data.

        Tags:
            Conferencing
        """
        if app is None:
            raise ValueError("Missing required parameter 'app'")
        url = f"{self.base_url}/v2/conferencing/{app}/oauth/callback"
        query_params = {k: v for k, v in [('state', state), ('code', code)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_list_installed_conferencing_apps(self) -> dict[str, Any]:
        """
        Retrieves conferencing data using the "GET" method at the "/v2/conferencing" endpoint, returning relevant information.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Conferencing
        """
        url = f"{self.base_url}/v2/conferencing"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_default(self, app) -> dict[str, Any]:
        """
        Sets the default conferencing application for the specified app identifier.

        Args:
            app (string): app

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Conferencing
        """
        if app is None:
            raise ValueError("Missing required parameter 'app'")
        url = f"{self.base_url}/v2/conferencing/{app}/default"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_get_default(self) -> dict[str, Any]:
        """
        Retrieves the default conferencing configuration from the API.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Conferencing
        """
        url = f"{self.base_url}/v2/conferencing/default"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def conferencing_controller_disconnect(self, app) -> dict[str, Any]:
        """
        Disconnects all participants from a specified conferencing application instance using the path parameter and returns a success response upon completion.

        Args:
            app (string): app

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Conferencing
        """
        if app is None:
            raise ValueError("Missing required parameter 'app'")
        url = f"{self.base_url}/v2/conferencing/{app}/disconnect"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def destination_calendars_controller_update_destination_calendars(self, integration, externalId) -> dict[str, Any]:
        """
        Updates a destination calendar at the specified path "/v2/destination-calendars" using the PUT method.

        Args:
            integration (string): The calendar service you want to integrate, as returned by the /calendars endpoint Example: 'apple_calendar'.
            externalId (string): Unique identifier used to represent the specfic calendar, as returned by the /calendars endpoint Example: 'https://caldav.icloud.com/26962146906/calendars/1644422A-1945-4438-BBC0-4F0Q23A57R7S/'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Destination Calendars
        """
        request_body = {
            'integration': integration,
            'externalId': externalId,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/destination-calendars"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_types_controller_2024_06_14_get_event_types(self, username=None, eventSlug=None, usernames=None, orgSlug=None, orgId=None) -> dict[str, Any]:
        """
        Retrieves a list of event types using the GET method, allowing filtering by username, event slug, usernames list, organization slug, and organization ID through query parameters.

        Args:
            username (string): The username of the user to get event types for. If only username provided will get all event types.
            eventSlug (string): Slug of event type to return. Notably, if eventSlug is provided then username must be provided too, because multiple users can have event with same slug.
            usernames (string): Get dynamic event type for multiple usernames separated by comma. e.g `usernames=alice,bob`
            orgSlug (string): slug of the user's organization if he is in one, orgId is not required if using this parameter
            orgId (number): ID of the organization of the user you want the get the event-types of, orgSlug is not needed when using this parameter

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types
        """
        url = f"{self.base_url}/v2/event-types"
        query_params = {k: v for k, v in [('username', username), ('eventSlug', eventSlug), ('usernames', usernames), ('orgSlug', orgSlug), ('orgId', orgId)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_types_controller_2024_06_14_get_event_type_by_id(self, eventTypeId) -> dict[str, Any]:
        """
        Retrieves detailed information about a specific event type by its ID using the Events API.

        Args:
            eventTypeId (string): eventTypeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/event-types/{eventTypeId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_types_controller_2024_06_14_delete_event_type(self, eventTypeId) -> dict[str, Any]:
        """
        Deletes the specified event type using the provided ID and returns a success status upon completion.

        Args:
            eventTypeId (string): eventTypeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/event-types/{eventTypeId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_type_webhooks_controller_create_event_type_webhook(self, eventTypeId, active, subscriberUrl, triggers, payloadTemplate=None, secret=None) -> dict[str, Any]:
        """
        Creates a webhook subscription for a specific event type, returning a success status upon creation.

        Args:
            eventTypeId (string): eventTypeId
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types / Webhooks
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/event-types/{eventTypeId}/webhooks"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_type_webhooks_controller_get_event_type_webhooks(self, eventTypeId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of webhooks configured for a specific event type, supporting pagination via take and skip parameters.

        Args:
            eventTypeId (string): eventTypeId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types / Webhooks
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/event-types/{eventTypeId}/webhooks"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_type_webhooks_controller_delete_all_event_type_webhooks(self, eventTypeId) -> dict[str, Any]:
        """
        Deletes a webhook associated with a specific event type ID using the DELETE method.

        Args:
            eventTypeId (string): eventTypeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types / Webhooks
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/event-types/{eventTypeId}/webhooks"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_type_webhooks_controller_update_event_type_webhook(self, eventTypeId, webhookId, payloadTemplate=None, active=None, subscriberUrl=None, triggers=None, secret=None) -> dict[str, Any]:
        """
        Updates a webhook associated with a specific event type using the PATCH method, modifying its properties at the path "/v2/event-types/{eventTypeId}/webhooks/{webhookId}".

        Args:
            eventTypeId (string): eventTypeId
            webhookId (string): webhookId
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types / Webhooks
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/event-types/{eventTypeId}/webhooks/{webhookId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_type_webhooks_controller_get_event_type_webhook(self, eventTypeId, webhookId) -> dict[str, Any]:
        """
        Retrieves details about a specific webhook for a given event type using the provided event type ID and webhook ID.

        Args:
            eventTypeId (string): eventTypeId
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types / Webhooks
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/event-types/{eventTypeId}/webhooks/{webhookId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_type_webhooks_controller_delete_event_type_webhook(self, eventTypeId, webhookId) -> dict[str, Any]:
        """
        Deletes a webhook associated with a specific event type using the provided `eventTypeId` and `webhookId` parameters.

        Args:
            eventTypeId (string): eventTypeId
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Event Types / Webhooks
        """
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/event-types/{eventTypeId}/webhooks/{webhookId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def me_controller_get_me(self) -> dict[str, Any]:
        """
        Retrieves the authenticated user's profile information and returns it in the API response.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Me
        """
        url = f"{self.base_url}/v2/me"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def me_controller_update_me(self, email=None, name=None, timeFormat=None, defaultScheduleId=None, weekStart=None, timeZone=None, locale=None, avatarUrl=None) -> dict[str, Any]:
        """
        Updates the properties of the current user's profile at the "/v2/me" path using the PATCH method.

        Args:
            email (string): email
            name (string): name
            timeFormat (number): Must be 12 or 24 Example: '12'.
            defaultScheduleId (number): defaultScheduleId
            weekStart (string): weekStart Example: 'Monday'.
            timeZone (string): timeZone
            locale (string): locale Example: 'en'.
            avatarUrl (string): URL of the user's avatar image Example: 'https://cal.com/api/avatar/2b735186-b01b-46d3-87da-019b8f61776b.png'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Me
        """
        request_body = {
            'email': email,
            'name': name,
            'timeFormat': timeFormat,
            'defaultScheduleId': defaultScheduleId,
            'weekStart': weekStart,
            'timeZone': timeZone,
            'locale': locale,
            'avatarUrl': avatarUrl,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/me"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def schedules_controller_2024_06_11_create_schedule(self, name, timeZone, isDefault, availability=None, overrides=None) -> dict[str, Any]:
        """
        Creates a new schedule using the provided data and returns a successful creation response with a 201 status code.

        Args:
            name (string): name Example: 'Catch up hours'.
            timeZone (string): Timezone is used to calculate available times when an event using the schedule is booked. Example: 'Europe/Rome'.
            isDefault (boolean): Each user should have 1 default schedule. If you specified `timeZone` when creating managed user, then the default schedule will be created with that timezone.
            Default schedule means that if an event type is not tied to a specific schedule then the default schedule is used. Example: 'True'.
            availability (array): Each object contains days and times when the user is available. If not passed, the default availability is Monday to Friday from 09:00 to 17:00. Example: "[{'days': ['Monday', 'Tuesday'], 'startTime': '17:00', 'endTime': '19:00'}, {'days': ['Wednesday', 'Thursday'], 'startTime': '16:00', 'endTime': '20:00'}]".
            overrides (array): Need to change availability for a specific date? Add an override. Example: "[{'date': '2024-05-20', 'startTime': '18:00', 'endTime': '21:00'}]".

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Schedules
        """
        request_body = {
            'name': name,
            'timeZone': timeZone,
            'availability': availability,
            'isDefault': isDefault,
            'overrides': overrides,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/schedules"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def schedules_controller_2024_06_11_get_schedules(self) -> dict[str, Any]:
        """
        Retrieves a list of schedules using specified authorization headers and API version.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Schedules
        """
        url = f"{self.base_url}/v2/schedules"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def schedules_controller_2024_06_11_get_default_schedule(self) -> dict[str, Any]:
        """
        Retrieves the default schedule of the authenticated user using the Cal.com API, returning relevant scheduling information.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Schedules
        """
        url = f"{self.base_url}/v2/schedules/default"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def schedules_controller_2024_06_11_get_schedule(self, scheduleId) -> dict[str, Any]:
        """
        Retrieves a specific schedule by its ID using the "GET" method at the "/v2/schedules/{scheduleId}" endpoint.

        Args:
            scheduleId (string): scheduleId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Schedules
        """
        if scheduleId is None:
            raise ValueError("Missing required parameter 'scheduleId'")
        url = f"{self.base_url}/v2/schedules/{scheduleId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def schedules_controller_2024_06_11_update_schedule(self, scheduleId, name=None, timeZone=None, availability=None, isDefault=None, overrides=None) -> dict[str, Any]:
        """
        Updates a schedule's configuration partially by specifying scheduleId and modified fields in the request body, returning a success status upon completion.

        Args:
            scheduleId (string): scheduleId
            name (string): name Example: 'One-on-one coaching'.
            timeZone (string): timeZone Example: 'Europe/Rome'.
            availability (array): availability Example: "[{'days': ['Monday', 'Tuesday'], 'startTime': '09:00', 'endTime': '10:00'}]".
            isDefault (boolean): isDefault Example: 'True'.
            overrides (array): overrides Example: "[{'date': '2024-05-20', 'startTime': '12:00', 'endTime': '14:00'}]".

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Schedules
        """
        if scheduleId is None:
            raise ValueError("Missing required parameter 'scheduleId'")
        request_body = {
            'name': name,
            'timeZone': timeZone,
            'availability': availability,
            'isDefault': isDefault,
            'overrides': overrides,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/schedules/{scheduleId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def schedules_controller_2024_06_11_delete_schedule(self, scheduleId) -> dict[str, Any]:
        """
        Deletes a specific schedule identified by the `scheduleId` using the `DELETE` method.

        Args:
            scheduleId (string): scheduleId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Schedules
        """
        if scheduleId is None:
            raise ValueError("Missing required parameter 'scheduleId'")
        url = f"{self.base_url}/v2/schedules/{scheduleId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def selected_calendars_controller_add_selected_calendar(self, integration, externalId, credentialId) -> dict[str, Any]:
        """
        Creates a new selected calendar entry for external integrations using provided identifiers.

        Args:
            integration (string): integration
            externalId (string): externalId
            credentialId (number): credentialId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Selected Calendars
        """
        request_body = {
            'integration': integration,
            'externalId': externalId,
            'credentialId': credentialId,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/selected-calendars"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def selected_calendars_controller_remove_selected_calendar(self, integration, externalId, credentialId) -> dict[str, Any]:
        """
        Deletes one or more selected calendars based on integration, external ID, and credential ID using the DELETE method at the "/v2/selected-calendars" path.

        Args:
            integration (string): Specifies the calendar integration platform to remove from the selected calendars.
            externalId (string): The "externalId" query parameter is used during the DELETE operation to specify the unique identifier of the selected calendar to be removed.
            credentialId (string): The credentialId in the query specifies the unique identifier of the credential to be deleted for the selected calendar.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Selected Calendars
        """
        url = f"{self.base_url}/v2/selected-calendars"
        query_params = {k: v for k, v in [('integration', integration), ('externalId', externalId), ('credentialId', credentialId)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def slots_controller_reserve_slot(self, eventTypeId, slotUtcStartDate, slotUtcEndDate, bookingUid=None) -> dict[str, Any]:
        """
        Reserves a slot using the "POST" method at "/v2/slots/reserve", creating a new reservation and returning a successful response when the operation is completed.

        Args:
            eventTypeId (number): Event Type ID for which timeslot is being reserved. Example: '100'.
            slotUtcStartDate (string): Start date of the slot in UTC timezone. Example: '2022-06-14T00:00:00.000Z'.
            slotUtcEndDate (string): End date of the slot in UTC timezone. Example: '2022-06-14T00:30:00.000Z'.
            bookingUid (string): Optional but only for events with seats. Used to retrieve booking of a seated event.

        Returns:
            dict[str, Any]: Successful response returning uid of reserved slot.

        Tags:
            Slots
        """
        request_body = {
            'eventTypeId': eventTypeId,
            'slotUtcStartDate': slotUtcStartDate,
            'slotUtcEndDate': slotUtcEndDate,
            'bookingUid': bookingUid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/slots/reserve"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def slots_controller_delete_selected_slot(self, uid) -> dict[str, Any]:
        """
        Deletes the specified slot identified by the uid parameter and returns a successful response upon completion.

        Args:
            uid (string): Unique identifier for the slot to be removed. Example: 'e2a7bcf9-cc7b-40a0-80d3-657d391775a6'.

        Returns:
            dict[str, Any]: Response deleting reserved slot by uid.

        Tags:
            Slots
        """
        url = f"{self.base_url}/v2/slots/selected-slot"
        query_params = {k: v for k, v in [('uid', uid)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def slots_controller_get_available_slots(self, startTime, endTime, eventTypeId, eventTypeSlug=None, usernameList=None, duration=None, rescheduleUid=None, timeZone=None, orgSlug=None, slotFormat=None) -> dict[str, Any]:
        """
        Retrieves a list of available slots within a specified time range, filtered by event type, user list, and other criteria, using the `GET` method at `/v2/slots/available`.

        Args:
            startTime (string): Start date string starting from which to fetch slots in UTC timezone. Example: '2022-06-14T00:00:00.000Z'.
            endTime (string): End date string until which to fetch slots in UTC timezone. Example: '2022-06-14T23:59:59.999Z'.
            eventTypeId (number): Event Type ID for which slots are being fetched. Example: '100'.
            eventTypeSlug (string): Slug of the event type for which slots are being fetched.
            usernameList (array): Only for dynamic events - list of usernames for which slots are being fetched.
            duration (number): Only for dynamic events - length of returned slots.
            rescheduleUid (string): Unique identifier used for rescheduling purposes, passed as a query parameter to filter available slots.
            timeZone (string): Specifies the time zone for available slots to be returned, using IANA time zone database names (e.g., "America/New_York").
            orgSlug (string): Organization slug.
            slotFormat (string): Format of slot times in response. Use 'range' to get start and end times. Example: 'range'.

        Returns:
            dict[str, Any]: Available time slots retrieved successfully

        Tags:
            Slots
        """
        url = f"{self.base_url}/v2/slots/available"
        query_params = {k: v for k, v in [('startTime', startTime), ('endTime', endTime), ('eventTypeId', eventTypeId), ('eventTypeSlug', eventTypeSlug), ('usernameList', usernameList), ('duration', duration), ('rescheduleUid', rescheduleUid), ('timeZone', timeZone), ('orgSlug', orgSlug), ('slotFormat', slotFormat)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def stripe_controller_redirect(self) -> dict[str, Any]:
        """
        Retrieves details of a connected Stripe account using the Stripe-Account header for authorization.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Stripe
        """
        url = f"{self.base_url}/v2/stripe/connect"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def stripe_controller_save(self, state, code) -> dict[str, Any]:
        """
        Retrieves a Stripe resource using a state and code query parameter and returns the result upon successful authentication.

        Args:
            state (string): A string value used to prevent cross-site request forgery (CSRF) attacks, returned unmodified in responses.
            code (string): The authorization code used to authenticate or authorize the request.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Stripe
        """
        url = f"{self.base_url}/v2/stripe/save"
        query_params = {k: v for k, v in [('state', state), ('code', code)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def stripe_controller_check(self) -> dict[str, Any]:
        """
        Checks system status or configuration in Stripe's v2 API and returns a success response.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Stripe
        """
        url = f"{self.base_url}/v2/stripe/check"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def stripe_controller_check_team_stripe_connection(self, teamId) -> dict[str, Any]:
        """
        Retrieves Stripe payment or subscription data for a specific team using the provided `teamId` and returns relevant information via a GET request.

        Args:
            teamId (string): teamId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Stripe
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/stripe/check/{teamId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_controller_create_team(self, name, slug=None, logoUrl=None, calVideoLogo=None, appLogo=None, appIconLogo=None, bio=None, hideBranding=False, isPrivate=None, hideBookATeamMember=None, metadata=None, theme=None, brandColor=None, darkBrandColor=None, bannerUrl=None, timeFormat=None, timeZone="Europe/London", weekStart="Sunday", autoAcceptCreator=True) -> dict[str, Any]:
        """
        Creates a new team using the API and returns a successful response with a 201 status code, indicating the creation of a resource.

        Args:
            name (string): Name of the team Example: 'CalTeam'.
            slug (string): Team slug Example: 'caltel'.
            logoUrl (string): URL of the teams logo image Example: 'https://i.cal.com/api/avatar/b0b58752-68ad-4c0d-8024-4fa382a77752.png'.
            calVideoLogo (string): calVideoLogo
            appLogo (string): appLogo
            appIconLogo (string): appIconLogo
            bio (string): bio
            hideBranding (boolean): hideBranding
            isPrivate (boolean): isPrivate
            hideBookATeamMember (boolean): hideBookATeamMember
            metadata (string): metadata
            theme (string): theme
            brandColor (string): brandColor
            darkBrandColor (string): darkBrandColor
            bannerUrl (string): URL of the teams banner image which is shown on booker Example: 'https://i.cal.com/api/avatar/949be534-7a88-4185-967c-c020b0c0bef3.png'.
            timeFormat (number): timeFormat
            timeZone (string): Timezone is used to create teams's default schedule from Monday to Friday from 9AM to 5PM. It will default to Europe/London if not passed. Example: 'America/New_York'.
            weekStart (string): weekStart Example: 'Monday'.
            autoAcceptCreator (boolean): autoAcceptCreator

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams
        """
        request_body = {
            'name': name,
            'slug': slug,
            'logoUrl': logoUrl,
            'calVideoLogo': calVideoLogo,
            'appLogo': appLogo,
            'appIconLogo': appIconLogo,
            'bio': bio,
            'hideBranding': hideBranding,
            'isPrivate': isPrivate,
            'hideBookATeamMember': hideBookATeamMember,
            'metadata': metadata,
            'theme': theme,
            'brandColor': brandColor,
            'darkBrandColor': darkBrandColor,
            'bannerUrl': bannerUrl,
            'timeFormat': timeFormat,
            'timeZone': timeZone,
            'weekStart': weekStart,
            'autoAcceptCreator': autoAcceptCreator,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/teams"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_controller_get_teams(self) -> dict[str, Any]:
        """
        Retrieves a list of teams and returns their details in the response.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams
        """
        url = f"{self.base_url}/v2/teams"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_controller_get_team(self, teamId) -> dict[str, Any]:
        """
        Retrieves information about a team specified by the team ID using the GET method.

        Args:
            teamId (string): teamId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/teams/{teamId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_controller_update_team(self, teamId, name=None, slug=None, logoUrl=None, calVideoLogo=None, appLogo=None, appIconLogo=None, bio=None, hideBranding=None, isPrivate=None, hideBookATeamMember=None, metadata=None, theme=None, brandColor=None, darkBrandColor=None, bannerUrl=None, timeFormat=None, timeZone=None, weekStart=None, bookingLimits=None, includeManagedEventsInLimits=None) -> dict[str, Any]:
        """
        Updates team configuration details for the specified team ID.

        Args:
            teamId (string): teamId
            name (string): Name of the team Example: 'CalTeam'.
            slug (string): Team slug Example: 'caltel'.
            logoUrl (string): URL of the teams logo image Example: 'https://i.cal.com/api/avatar/b0b58752-68ad-4c0d-8024-4fa382a77752.png'.
            calVideoLogo (string): calVideoLogo
            appLogo (string): appLogo
            appIconLogo (string): appIconLogo
            bio (string): bio
            hideBranding (boolean): hideBranding
            isPrivate (boolean): isPrivate
            hideBookATeamMember (boolean): hideBookATeamMember
            metadata (string): metadata
            theme (string): theme
            brandColor (string): brandColor
            darkBrandColor (string): darkBrandColor
            bannerUrl (string): URL of the teams banner image which is shown on booker Example: 'https://i.cal.com/api/avatar/949be534-7a88-4185-967c-c020b0c0bef3.png'.
            timeFormat (number): timeFormat
            timeZone (string): Timezone is used to create teams's default schedule from Monday to Friday from 9AM to 5PM. It will default to Europe/London if not passed. Example: 'America/New_York'.
            weekStart (string): weekStart Example: 'Monday'.
            bookingLimits (string): bookingLimits
            includeManagedEventsInLimits (boolean): includeManagedEventsInLimits

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        request_body = {
            'name': name,
            'slug': slug,
            'logoUrl': logoUrl,
            'calVideoLogo': calVideoLogo,
            'appLogo': appLogo,
            'appIconLogo': appIconLogo,
            'bio': bio,
            'hideBranding': hideBranding,
            'isPrivate': isPrivate,
            'hideBookATeamMember': hideBookATeamMember,
            'metadata': metadata,
            'theme': theme,
            'brandColor': brandColor,
            'darkBrandColor': darkBrandColor,
            'bannerUrl': bannerUrl,
            'timeFormat': timeFormat,
            'timeZone': timeZone,
            'weekStart': weekStart,
            'bookingLimits': bookingLimits,
            'includeManagedEventsInLimits': includeManagedEventsInLimits,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/teams/{teamId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_controller_delete_team(self, teamId) -> dict[str, Any]:
        """
        Deletes a specified team using the provided team ID.

        Args:
            teamId (string): teamId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/teams/{teamId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_event_types_controller_create_team_event_type(self, teamId, lengthInMinutes, lengthInMinutesOptions, title, slug, schedulingType, hosts, description=None, locations=None, bookingFields=None, disableGuests=None, slotInterval=None, minimumBookingNotice=None, beforeEventBuffer=None, afterEventBuffer=None, scheduleId=None, bookingLimitsCount=None, onlyShowFirstAvailableSlot=None, bookingLimitsDuration=None, bookingWindow=None, offsetStart=None, bookerLayouts=None, confirmationPolicy=None, recurrence=None, requiresBookerEmailVerification=None, hideCalendarNotes=None, lockTimeZoneToggleOnBookingPage=None, color=None, seats=None, customName=None, destinationCalendar=None, useDestinationCalendarEmail=None, hideCalendarEventDetails=None, successRedirectUrl=None, assignAllTeamMembers=None) -> dict[str, Any]:
        """
        Creates a new event type for a specified team using the API and returns a successful creation status.

        Args:
            teamId (string): teamId
            lengthInMinutes (number): lengthInMinutes Example: '60'.
            lengthInMinutesOptions (array): If you want that user can choose between different lengths of the event you can specify them here. Must include the provided `lengthInMinutes`. Example: '[15, 30, 60]'.
            title (string): title Example: 'Learn the secrets of masterchief!'.
            slug (string): slug Example: 'learn-the-secrets-of-masterchief'.
            schedulingType (object): schedulingType
            hosts (array): hosts
            description (string): description Example: 'Discover the culinary wonders of the Argentina by making the best flan ever!'.
            locations (array): Locations where the event will take place. If not provided, cal video link will be used as the location.
            bookingFields (array): Custom fields that can be added to the booking form when the event is booked by someone. By default booking form has name and email field.
            disableGuests (boolean): If true, person booking this event't cant add guests via their emails.
            slotInterval (number): Number representing length of each slot when event is booked. By default it equal length of the event type.
              If event length is 60 minutes then we would have slots 9AM, 10AM, 11AM etc. but if it was changed to 30 minutes then
              we would have slots 9AM, 9:30AM, 10AM, 10:30AM etc. as the available times to book the 60 minute event.
            minimumBookingNotice (number): Minimum number of minutes before the event that a booking can be made.
            beforeEventBuffer (number): Time spaces that can be pre-pended before an event to give more time before it.
            afterEventBuffer (number): Time spaces that can be appended after an event to give more time after it.
            scheduleId (number): If you want that this event has different schedule than user's default one you can specify it here.
            bookingLimitsCount (string): Limit how many times this event can be booked
            onlyShowFirstAvailableSlot (boolean): This will limit your availability for this event type to one slot per day, scheduled at the earliest available time.
            bookingLimitsDuration (string): Limit total amount of time that this event can be booked
            bookingWindow (string): Limit how far in the future this event can be booked
            offsetStart (number): Offset timeslots shown to bookers by a specified number of minutes
            bookerLayouts (string): Should booker have week, month or column view. Specify default layout and enabled layouts user can pick.
            confirmationPolicy (string): Specify how the booking needs to be manually confirmed before it is pushed to the integrations and a confirmation mail is sent.
            recurrence (string): Create a recurring event type.
            requiresBookerEmailVerification (boolean): requiresBookerEmailVerification
            hideCalendarNotes (boolean): hideCalendarNotes
            lockTimeZoneToggleOnBookingPage (boolean): lockTimeZoneToggleOnBookingPage
            color (object): color
            seats (string): Create an event type with multiple seats.
            customName (string): Customizable event name with valid variables: 
              {Event type title}, {Organiser}, {Scheduler}, {Location}, {Organiser first name}, 
              {Scheduler first name}, {Scheduler last name}, {Event duration}, {LOCATION}, 
              {HOST/ATTENDEE}, {HOST}, {ATTENDEE}, {USER} Example: '{Event type title} between {Organiser} and {Scheduler}'.
            destinationCalendar (object): destinationCalendar
            useDestinationCalendarEmail (boolean): useDestinationCalendarEmail
            hideCalendarEventDetails (boolean): hideCalendarEventDetails
            successRedirectUrl (string): A valid URL where the booker will redirect to, once the booking is completed successfully Example: 'https://masterchief.com/argentina/flan/video/9129412'.
            assignAllTeamMembers (boolean): If true, all current and future team members will be assigned to this event type

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Event Types
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        request_body = {
            'lengthInMinutes': lengthInMinutes,
            'lengthInMinutesOptions': lengthInMinutesOptions,
            'title': title,
            'slug': slug,
            'description': description,
            'locations': locations,
            'bookingFields': bookingFields,
            'disableGuests': disableGuests,
            'slotInterval': slotInterval,
            'minimumBookingNotice': minimumBookingNotice,
            'beforeEventBuffer': beforeEventBuffer,
            'afterEventBuffer': afterEventBuffer,
            'scheduleId': scheduleId,
            'bookingLimitsCount': bookingLimitsCount,
            'onlyShowFirstAvailableSlot': onlyShowFirstAvailableSlot,
            'bookingLimitsDuration': bookingLimitsDuration,
            'bookingWindow': bookingWindow,
            'offsetStart': offsetStart,
            'bookerLayouts': bookerLayouts,
            'confirmationPolicy': confirmationPolicy,
            'recurrence': recurrence,
            'requiresBookerEmailVerification': requiresBookerEmailVerification,
            'hideCalendarNotes': hideCalendarNotes,
            'lockTimeZoneToggleOnBookingPage': lockTimeZoneToggleOnBookingPage,
            'color': color,
            'seats': seats,
            'customName': customName,
            'destinationCalendar': destinationCalendar,
            'useDestinationCalendarEmail': useDestinationCalendarEmail,
            'hideCalendarEventDetails': hideCalendarEventDetails,
            'successRedirectUrl': successRedirectUrl,
            'schedulingType': schedulingType,
            'hosts': hosts,
            'assignAllTeamMembers': assignAllTeamMembers,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/teams/{teamId}/event-types"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_event_types_controller_get_team_event_types(self, teamId, eventSlug=None) -> dict[str, Any]:
        """
        Retrieves a list of event types for a specified team using the provided team ID and optionally filters by event slug.

        Args:
            teamId (string): teamId
            eventSlug (string): Slug of team event type to return.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Event Types
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/teams/{teamId}/event-types"
        query_params = {k: v for k, v in [('eventSlug', eventSlug)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_event_types_controller_get_team_event_type(self, teamId, eventTypeId) -> dict[str, Any]:
        """
        Retrieves details about a specific event type within a team using the "GET" method, requiring both team ID and event type ID as path parameters.

        Args:
            teamId (string): teamId
            eventTypeId (string): eventTypeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Event Types
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/teams/{teamId}/event-types/{eventTypeId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_event_types_controller_delete_team_event_type(self, teamId, eventTypeId) -> dict[str, Any]:
        """
        Deletes a specific event type for a team using the provided path parameters.

        Args:
            teamId (string): teamId
            eventTypeId (string): eventTypeId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Event Types
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        url = f"{self.base_url}/v2/teams/{teamId}/event-types/{eventTypeId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_event_types_controller_create_phone_call(self, teamId, eventTypeId, yourPhoneNumber, numberToCall, calApiKey, enabled, templateType, schedulerName=None, guestName=None, guestEmail=None, guestCompany=None, beginMessage=None, generalPrompt=None) -> dict[str, Any]:
        """
        Creates a phone call for a specific event type within a team using the "POST" method, returning a successful creation status.

        Args:
            teamId (string): teamId
            eventTypeId (string): eventTypeId
            yourPhoneNumber (string): Your phone number
            numberToCall (string): Number to call
            calApiKey (string): CAL API Key
            enabled (object): Enabled status
            templateType (string): Template type
            schedulerName (string): Scheduler name
            guestName (string): Guest name
            guestEmail (string): Guest email
            guestCompany (string): Guest company
            beginMessage (string): Begin message
            generalPrompt (string): General prompt

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Event Types
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if eventTypeId is None:
            raise ValueError("Missing required parameter 'eventTypeId'")
        request_body = {
            'yourPhoneNumber': yourPhoneNumber,
            'numberToCall': numberToCall,
            'calApiKey': calApiKey,
            'enabled': enabled,
            'templateType': templateType,
            'schedulerName': schedulerName,
            'guestName': guestName,
            'guestEmail': guestEmail,
            'guestCompany': guestCompany,
            'beginMessage': beginMessage,
            'generalPrompt': generalPrompt,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/teams/{teamId}/event-types/{eventTypeId}/create-phone-call"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_memberships_controller_create_team_membership(self, teamId, userId, accepted=False, role="MEMBER", disableImpersonation=False) -> dict[str, Any]:
        """
        Adds multiple users to a team using their organization membership IDs through a POST request to the specified team endpoint.

        Args:
            teamId (string): teamId
            userId (number): userId
            accepted (boolean): accepted
            role (string): role
            disableImpersonation (boolean): disableImpersonation

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Memberships
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        request_body = {
            'userId': userId,
            'accepted': accepted,
            'role': role,
            'disableImpersonation': disableImpersonation,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/teams/{teamId}/memberships"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_memberships_controller_get_team_memberships(self, teamId, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves paginated membership details for a specific team using `take` and `skip` parameters to manage results.

        Args:
            teamId (string): teamId
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Memberships
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        url = f"{self.base_url}/v2/teams/{teamId}/memberships"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_memberships_controller_get_team_membership(self, teamId, membershipId) -> dict[str, Any]:
        """
        Retrieves the membership details for a specific user in a team using the provided membership ID.

        Args:
            teamId (string): teamId
            membershipId (string): membershipId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Memberships
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        url = f"{self.base_url}/v2/teams/{teamId}/memberships/{membershipId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_memberships_controller_update_team_membership(self, teamId, membershipId, accepted=None, role=None, disableImpersonation=None) -> dict[str, Any]:
        """
        Updates the membership role for a user in a specific team using the GitHub API and returns a success status.

        Args:
            teamId (string): teamId
            membershipId (string): membershipId
            accepted (boolean): accepted
            role (string): role
            disableImpersonation (boolean): disableImpersonation

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Memberships
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        request_body = {
            'accepted': accepted,
            'role': role,
            'disableImpersonation': disableImpersonation,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/teams/{teamId}/memberships/{membershipId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def teams_memberships_controller_delete_team_membership(self, teamId, membershipId) -> dict[str, Any]:
        """
        Removes a user's team membership in GitHub, requiring admin permissions or organization ownership.

        Args:
            teamId (string): teamId
            membershipId (string): membershipId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Teams / Memberships
        """
        if teamId is None:
            raise ValueError("Missing required parameter 'teamId'")
        if membershipId is None:
            raise ValueError("Missing required parameter 'membershipId'")
        url = f"{self.base_url}/v2/teams/{teamId}/memberships/{membershipId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def timezones_controller_get_time_zones(self) -> dict[str, Any]:
        """
        Retrieves a list of time zones with associated metadata, including codes, descriptions, and identifiers.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Timezones
        """
        url = f"{self.base_url}/v2/timezones"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def webhooks_controller_create_webhook(self, active, subscriberUrl, triggers, payloadTemplate=None, secret=None) -> dict[str, Any]:
        """
        Creates and configures a webhook endpoint to receive HTTP POST notifications for specific events, returning a success response upon creation.

        Args:
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Webhooks
        """
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/webhooks"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def webhooks_controller_get_webhooks(self, take=None, skip=None) -> dict[str, Any]:
        """
        Retrieves a list of webhooks, allowing pagination with optional parameters to specify the number of items to take and skip.

        Args:
            take (number): The number of items to return Example: '10'.
            skip (number): The number of items to skip Example: '0'.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Webhooks
        """
        url = f"{self.base_url}/v2/webhooks"
        query_params = {k: v for k, v in [('take', take), ('skip', skip)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def webhooks_controller_update_webhook(self, webhookId, payloadTemplate=None, active=None, subscriberUrl=None, triggers=None, secret=None) -> dict[str, Any]:
        """
        Updates a webhook identified by its ID using the PATCH method to modify its configuration.

        Args:
            webhookId (string): webhookId
            payloadTemplate (string): The template of the payload that will be sent to the subscriberUrl, check cal.com/docs/core-features/webhooks for more information Example: '{"content":"A new event has been scheduled","type":"{{type}}","name":"{{title}}","organizer":"{{organizer.name}}","booker":"{{attendees.0.name}}"}'.
            active (boolean): active
            subscriberUrl (string): subscriberUrl
            triggers (string): triggers Example: "['BOOKING_CREATED', 'BOOKING_RESCHEDULED', 'BOOKING_CANCELLED', 'BOOKING_CONFIRMED', 'BOOKING_REJECTED', 'BOOKING_COMPLETED', 'BOOKING_NO_SHOW', 'BOOKING_REOPENED']".
            secret (string): secret

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Webhooks
        """
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        request_body = {
            'payloadTemplate': payloadTemplate,
            'active': active,
            'subscriberUrl': subscriberUrl,
            'triggers': triggers,
            'secret': secret,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/v2/webhooks/{webhookId}"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def webhooks_controller_get_webhook(self, webhookId) -> dict[str, Any]:
        """
        Retrieves information about a specific webhook identified by its ID using the "GET" method.

        Args:
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Webhooks
        """
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/webhooks/{webhookId}"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def webhooks_controller_delete_webhook(self, webhookId) -> dict[str, Any]:
        """
        Deletes a webhook by its ID using the DELETE method at the "/v2/webhooks/{webhookId}" path, removing the specified webhook endpoint.

        Args:
            webhookId (string): webhookId

        Returns:
            dict[str, Any]: API response data.

        Tags:
            Webhooks
        """
        if webhookId is None:
            raise ValueError("Missing required parameter 'webhookId'")
        url = f"{self.base_url}/v2/webhooks/{webhookId}"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def list_tools(self):
        return [
            self.cal_provider_controller_verify_client_id,
            self.cal_provider_controller_verify_access_token,
            self.gcal_controller_redirect,
            self.gcal_controller_save,
            self.gcal_controller_check,
            self.oauth_client_users_controller_get_managed_users,
            self.oauth_client_users_controller_create_user,
            self.oauth_client_users_controller_get_user_by_id,
            self.oauth_client_users_controller_update_user,
            self.oauth_client_users_controller_delete_user,
            self.oauth_client_users_controller_force_refresh,
            self.oauth_flow_controller_refresh_tokens,
            self.oauth_client_webhooks_controller_create_oauth_client_webhook,
            self.oauth_client_webhooks_controller_get_oauth_client_webhooks,
            self.oauth_client_webhooks_controller_delete_all_oauth_client_webhooks,
            self.oauth_client_webhooks_controller_update_oauth_client_webhook,
            self.oauth_client_webhooks_controller_get_oauth_client_webhook,
            self.oauth_client_webhooks_controller_delete_oauth_client_webhook,
            self.organizations_attributes_controller_get_organization_attributes,
            self.organizations_attributes_controller_create_organization_attribute,
            self.organizations_attributes_controller_get_organization_attribute,
            self.organizations_attributes_controller_update_organization_attribute,
            self.organizations_attributes_controller_delete_organization_attribute,
            self.organizations_options_attributes_controller_create_organization_attribute_option,
            self.organizations_options_attributes_controller_get_organization_attribute_options,
            self.organizations_options_attributes_controller_delete_organization_attribute_option,
            self.organizations_options_attributes_controller_update_organization_attribute_option,
            self.organizations_options_attributes_controller_assign_organization_attribute_option_to_user,
            self.organizations_options_attributes_controller_get_organization_attribute_options_for_user,
            self.organizations_options_attributes_controller_unassign_organization_attribute_option_from_user,
            self.organizations_event_types_controller_create_team_event_type,
            self.organizations_event_types_controller_get_team_event_types,
            self.organizations_event_types_controller_get_team_event_type,
            self.organizations_event_types_controller_create_phone_call,
            self.organizations_event_types_controller_get_teams_event_types,
            self.organizations_memberships_controller_get_all_memberships,
            self.organizations_memberships_controller_create_membership,
            self.organizations_memberships_controller_get_org_membership,
            self.organizations_memberships_controller_delete_membership,
            self.organizations_memberships_controller_update_membership,
            self.organizations_schedules_controller_get_organization_schedules,
            self.organizations_schedules_controller_create_user_schedule,
            self.organizations_schedules_controller_get_user_schedules,
            self.organizations_schedules_controller_get_user_schedule,
            self.organizations_schedules_controller_update_user_schedule,
            self.organizations_schedules_controller_delete_user_schedule,
            self.organizations_teams_controller_get_all_teams,
            self.organizations_teams_controller_create_team,
            self.organizations_teams_controller_get_my_teams,
            self.organizations_teams_controller_get_team,
            self.organizations_teams_controller_delete_team,
            self.organizations_teams_controller_update_team,
            self.organizations_teams_memberships_controller_get_all_org_team_memberships,
            self.organizations_teams_memberships_controller_create_org_team_membership,
            self.organizations_teams_memberships_controller_get_org_team_membership,
            self.organizations_teams_memberships_controller_delete_org_team_membership,
            self.organizations_teams_memberships_controller_update_org_team_membership,
            self.organizations_teams_schedules_controller_get_user_schedules,
            self.organizations_users_controller_get_organizations_users,
            self.organizations_users_controller_create_organization_user,
            self.organizations_users_controller_delete_organization_user,
            self.organizations_webhooks_controller_get_all_organization_webhooks,
            self.organizations_webhooks_controller_create_organization_webhook,
            self.organizations_webhooks_controller_get_organization_webhook,
            self.organizations_webhooks_controller_delete_webhook,
            self.organizations_webhooks_controller_update_org_webhook,
            self.bookings_controller_2024_08_13_get_bookings,
            self.bookings_controller_2024_08_13_get_booking,
            self.bookings_controller_2024_08_13_reschedule_booking,
            self.bookings_controller_2024_08_13_cancel_booking,
            self.bookings_controller_2024_08_13_mark_no_show,
            self.bookings_controller_2024_08_13_reassign_booking,
            self.bookings_controller_2024_08_13_reassign_booking_to_user,
            self.bookings_controller_2024_08_13_confirm_booking,
            self.bookings_controller_2024_08_13_decline_booking,
            self.calendars_controller_create_ics_feed,
            self.calendars_controller_check_ics_feed,
            self.calendars_controller_get_busy_times,
            self.calendars_controller_get_calendars,
            self.calendars_controller_redirect,
            self.calendars_controller_save,
            self.calendars_controller_sync_credentials,
            self.calendars_controller_check,
            self.calendars_controller_delete_calendar_credentials,
            self.conferencing_controller_connect,
            self.conferencing_controller_redirect,
            self.conferencing_controller_save,
            self.conferencing_controller_list_installed_conferencing_apps,
            self.conferencing_controller_default,
            self.conferencing_controller_get_default,
            self.conferencing_controller_disconnect,
            self.destination_calendars_controller_update_destination_calendars,
            self.event_types_controller_2024_06_14_get_event_types,
            self.event_types_controller_2024_06_14_get_event_type_by_id,
            self.event_types_controller_2024_06_14_delete_event_type,
            self.event_type_webhooks_controller_create_event_type_webhook,
            self.event_type_webhooks_controller_get_event_type_webhooks,
            self.event_type_webhooks_controller_delete_all_event_type_webhooks,
            self.event_type_webhooks_controller_update_event_type_webhook,
            self.event_type_webhooks_controller_get_event_type_webhook,
            self.event_type_webhooks_controller_delete_event_type_webhook,
            self.me_controller_get_me,
            self.me_controller_update_me,
            self.schedules_controller_2024_06_11_create_schedule,
            self.schedules_controller_2024_06_11_get_schedules,
            self.schedules_controller_2024_06_11_get_default_schedule,
            self.schedules_controller_2024_06_11_get_schedule,
            self.schedules_controller_2024_06_11_update_schedule,
            self.schedules_controller_2024_06_11_delete_schedule,
            self.selected_calendars_controller_add_selected_calendar,
            self.selected_calendars_controller_remove_selected_calendar,
            self.slots_controller_reserve_slot,
            self.slots_controller_delete_selected_slot,
            self.slots_controller_get_available_slots,
            self.stripe_controller_redirect,
            self.stripe_controller_save,
            self.stripe_controller_check,
            self.stripe_controller_check_team_stripe_connection,
            self.teams_controller_create_team,
            self.teams_controller_get_teams,
            self.teams_controller_get_team,
            self.teams_controller_update_team,
            self.teams_controller_delete_team,
            self.teams_event_types_controller_create_team_event_type,
            self.teams_event_types_controller_get_team_event_types,
            self.teams_event_types_controller_get_team_event_type,
            self.teams_event_types_controller_delete_team_event_type,
            self.teams_event_types_controller_create_phone_call,
            self.teams_memberships_controller_create_team_membership,
            self.teams_memberships_controller_get_team_memberships,
            self.teams_memberships_controller_get_team_membership,
            self.teams_memberships_controller_update_team_membership,
            self.teams_memberships_controller_delete_team_membership,
            self.timezones_controller_get_time_zones,
            self.webhooks_controller_create_webhook,
            self.webhooks_controller_get_webhooks,
            self.webhooks_controller_update_webhook,
            self.webhooks_controller_get_webhook,
            self.webhooks_controller_delete_webhook
        ]
